(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{384:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"scanner와-bufferedreader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scanner와-bufferedreader"}},[t._v("#")]),t._v(" Scanner와 BufferedReader")]),t._v(" "),s("h2",{attrs:{id:"java의-입력-받는-방식"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java의-입력-받는-방식"}},[t._v("#")]),t._v(" Java의 입력 받는 방식")]),t._v(" "),s("p",[t._v("Java를 처음 배울때는 주로 사용한 입력 방식은 "),s("code",[t._v("Scanner")]),t._v("를 사용해서 콘솔에서 입력을 받았습니다.")]),t._v(" "),s("p",[t._v("알고리즘을 진행하다보니 "),s("code",[t._v("Scanner")]),t._v("클래스로 하면 시간 초과가 나는 경우가 많아서 찾아보니 "),s("code",[t._v("BufferedReader")]),t._v("클래스를 통해서 입력을 받는 방법이 있습니다.")]),t._v(" "),s("p",[s("code",[t._v("Scanner")]),t._v("클래스와 "),s("code",[t._v("BufferedReader")]),t._v("클래스를 정리해보겠습니다.")]),t._v(" "),s("h2",{attrs:{id:"scanner란"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scanner란"}},[t._v("#")]),t._v(" Scanner란?")]),t._v(" "),s("p",[s("code",[t._v("Scanner")]),t._v("란 콘솔로 부터 사용자의 입력을 공란과 줄바꿈을 모두 입력값의 경계로 인식해 데이터를 좀 더 쉽게 입력받을 수 있는 클래스입니다.")]),t._v(" "),s("p",[t._v("데이터 타입이 입력 받는 시점에서 결정되므로 따로 형변환이 필요하지 않다. (문자열 파싱 X)")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.geeksforgeeks.org/scanner-class-in-java",target:"_blank"}},[t._v("GeeksforGeeks")]),t._v(" 사이트에서 Scanner 클래스의 설명은 아래와 같습니다.")]),t._v(" "),s("blockquote",[s("p",[t._v("Scanner is a class in java.util package used for obtaining the input of the primitive types like int, double, etc. and strings")])]),t._v(" "),s("p",[t._v('간략하게 "원시타입인 int, double 등, string을 입력받는 클래스이다."')]),t._v(" "),s("p",[t._v("Scanner의 사용법은 아래와 같이 객체를 생성해서 사용합니다.")]),t._v(" "),s("ul",[s("li",[t._v("ScannerTest.java")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScannerTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" scanner "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"숫자를 입력하세요 : "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" scanner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"bufferedreader-란"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bufferedreader-란"}},[t._v("#")]),t._v(" BufferedReader?란?")]),t._v(" "),s("p",[s("code",[t._v("InputStreamReader")]),t._v("는 문자열을 Character 단위(한 글자)로 읽어 들입니다.\n이 점을 보완하고자 "),s("code",[t._v("BufferedReader")]),t._v("가 존재합니다.\n"),s("code",[t._v("BufferedReader")]),t._v("는 "),s("code",[t._v("InputStreamReader")]),t._v("에 버퍼링 기능이 추가된 클래스입니다.")]),t._v(" "),s("p",[t._v("사용자가 요청할 때마다 데이터를 읽어 오는 것이 아닌 일정한 크기의 데이터를 한번에 읽어와 버퍼에 보관하고 사용자가 요청을 하면 버퍼에서 데이터를 읽어오는 방식으로 동작합니다.")]),t._v(" "),s("p",[t._v("더 큰 버퍼를 사용하기에 "),s("code",[t._v("Scanner")]),t._v("보다 성능면에서 더 빠르고 부하가 적습니다.")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.geeksforgeeks.org/java-io-bufferedreader-class-java/",target:"_blank"}},[t._v("GeeksforGeeks")]),t._v(" 사이트에서 BufferedReader 클래스의 설명은 아래와 같다.")]),t._v(" "),s("blockquote",[s("p",[t._v("Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.")])]),t._v(" "),s("p",[t._v('"문자 입력 스트림에서 텍스트를 읽고 문자, 배열 등을 효율적으로 읽을 수 있도록 버퍼링하는 클래스이다."')]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStreamReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReaderTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BufferedReader를 구현하면 IOException을 처리해줘야 한다.")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),t._v(" br "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStreamReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"숫자를 입력하세요 : "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" br"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BufferedReader를 통해서 입력받으면 String으로 읽을 수 있게 래퍼 클래스로 알맞게 형변환해줘야 한다.")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"scanner와-bufferedreader의-차이점은"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scanner와-bufferedreader의-차이점은"}},[t._v("#")]),t._v(" Scanner와 BufferedReader의 차이점은?")]),t._v(" "),s("p",[t._v("Scanner와 BufferedReader의 차이점은 다음과 같습니다.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("BufferedReader")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Scanner")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Buffer Size")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8192")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1024")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Syncronized(동기화)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("문자열 파싱")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("문자열로 단순히 읽어 들임")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("문자열 파싱 가능")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Exception")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("IOException 던짐")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("IOException 숨김")])])])]),t._v(" "),s("ul",[s("li",[t._v("버퍼 사이즈\n"),s("ul",[s("li",[t._v("BufferReader의 경우는 Scanner보다 더 큰 Buffer Size를 가지고 있기에 속도가 더 빠릅니다.")])])]),t._v(" "),s("li",[t._v("문자열 파싱\n"),s("ul",[s("li",[t._v("Scanner의 경우는 사용자가 값을 입력할 때 데이터 타입이 결정되기에 문자열 파싱이 이뤄집니다.")]),t._v(" "),s("li",[t._v("BufferedReader의 경우에는 문자열 파싱을 하지 않고 단순히 문자열로 읽어들이기에 속도가 더 빠릅니다.")])])])]),t._v(" "),s("h2",{attrs:{id:"결론"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#결론"}},[t._v("#")]),t._v(" 결론")]),t._v(" "),s("p",[t._v("상황에 맞게 적절한 클래스를 사용하면 되고, 알고리즘 문제를 풀 때 성능을 높여야 한다면 버퍼의 사이즈가 더 커서 속도가 빠른 "),s("code",[t._v("BufferedReader")]),t._v("클래스를 사용하면 됩니다.")])])}),[],!1,null,null,null);a.default=n.exports}}]);